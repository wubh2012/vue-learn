<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>使用props向子组件传递数据</title>
  <script src="https://cdn.bootcss.com/vue/2.6.10/vue.min.js"></script>
  <!-- <script src="https://cdn.bootcss.com/vue/2.6.10/vue.runtime.min.js"></script> -->
  <style>
    h2 {
      border: 1px solid red;
    }
  </style>
</head>

<body>
  <div id="app" style="margin-bottom: 300px;">

    <p>基本使用</p>
    <!-- myTest 相当于 mytest -->
    <component-a msg="传递给局部组件的静态消息" my-msg="测试my-msg" myTest="测试myTest"></component-a>
    <p>使用 v-bind动态绑定</p>
    <component-a :msg="msg"></component-a>
    <p>使用 v-model 动态传递消息给子组件</p>
    <input type="text" v-model="inputvalue">
    <component-b :inputvalue="inputvalue"></component-b>
    <p>改变文本框的数字来动态改变色块的长度</p>
    <input type="number" v-model="width">
    <component-c :width="width"></component-c>

  </div>
  <script>

    /*
    1. 在html中, myMessage 和 mymessage  是一致的,,因此在组件中的html中使用必须使用kebab­case（短横线）命名方式。在html中不允许使用驼峰
    2. 在组件中, 父组件给子组件传递数据必须用短横线。
    3. 在template中，必须使用驼峰命名方式，若为短横线的命名方式。则会直接保错
    3. 在组件的data中,用this.XXX引用时,只能是驼峰命名方式。若为短横线的命名方式，则会报错
    */
    let componetA = {
      props: ['msg', 'myMsg', 'mytest'],
      data: function () {
        return {
          msg1: '局部组件'
        }
      },
      template: '<h2>{{msg}}, {{myMsg}}, {{mytest}}</h2>'
    }
    let componetB = {
      props: ['inputvalue'],
      data: function () {
        return {
          msg1: '局部组件'
        }
      },
      template: '<h2>{{displaymsg}}</h2>',
      computed: {
        displaymsg: function () {
          return `${this.msg1}, ${this.inputvalue}`
        }
      }
    }
    let componetC ={
      props: ['width'],
      data: function () {
        return {
          msg1: '局部组件'
        }
      },
      template: '<div :style="changeWidth"></div>',
      computed: {
        changeWidth: function () {
          return {
            width: this.width + 'px',
            height: '30px',
            'background-color': 'red',
          }
        }
      }
    }

    let app1 = new Vue({
      el: '#app',
      data: {
        msg: '来自app1的消息',
        inputvalue: '',
        width: 1
      },
      methods: {

      },
      // 在 componets 属性中注册局部组件
      components: {
        'component-a': componetA,
        'component-b': componetB,
        'component-c': componetC,
      }

    })
  </script>
</body>

</html>